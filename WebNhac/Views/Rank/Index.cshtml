@model WebNhac.ViewModels.RankViewModel

<div class="row" style="margin-top: 60px;">
    <div class="panel panel-default">
        <div class="bxh-music">THEO DÕI THỨ HẠNG BÀI HÁT</div>
        <div class="panel-body">
            <div class="row">
                <canvas id="myChart" style="width:100%;" ></canvas>
            </div>
        </div>
    </div>



    <div class="panel panel-default">
        <div class="bxh-music">BẢNG XẾP HẠNG BÀI HÁT ĐƯỢC NGHE NHIỀU NHẤT</div>
        <div class="panel-body">
            <div class="row">
                @foreach (var item in Model.Musics)
                {
                    <a href="/bai-hat/@item.Link-@item.IdMusic">
                        <div class="col-md-2">
                            <img src="@item.Thumbnail" alt="@item.Name" width="100%" height="120" />
                            <h4 style="text-align: center;">@item.Name</h4>
                        </div>
                    </a>
                }
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>

    <script>
        // Define arrays to store x and y values
        var xValues = [];
        var yValues = [];
        var barColors = ["red", "green", "blue", "orange", "brown"]; // Color array, if you want to dynamically generate colors you can do it too

        // Populate xValues and yValues arrays dynamically from Model.Music
        @foreach (var item in Model.Musics)
        {
            <text>
                xValues.push('@Html.Raw(item.Name)');
                yValues.push('@item.CountListened');
            </text>
        }

            // Create the chart
            new Chart("myChart", {
                type: "bar",
                data: {
                    labels: xValues,
                    datasets: [{
                        backgroundColor: barColors.slice(0, xValues.length), // Adjust colors array length based on the number of values
                        data: yValues
                    }]
                },
                options: {
                    legend: { display: false },
                },
                scales: {
                    xAxes: [{
                        ticks: {
                            fontFamily: 'Arial', // Specify font family here
                        }
                    }]
                }
            });
    </script>

}